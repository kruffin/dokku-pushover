#!/bin/bash

source "$PLUGIN_BASE_PATH/common/functions"
source "$PLUGIN_PATH/pushover_dokku_defines"

get_pushover_help() {
	cat<<EOF
${PLUGIN_COMMAND_PREFIX}:create <name> Create a Pushover service
${PLUGIN_COMMAND_PREFIX}:set [app] <token> <userId>, Set Pushover token and user ID to send messages to
${PLUGIN_COMMAND_PREFIX}:clear [app], Clears Pushover settings for the indicated app
${PLUGIN_COMMAND_PREFIX}:get [app], Display Pushover settings for the indicated app
EOF
}

is_param_app() {
	local APP="$1"
	if [[ ! -n "$APP" ]]; then 
		return false
	elif [[ ! -d "$DOKKU_ROOT/$APP" ]]; then
		return false
	else
		return true
	fi
}

get_app_path() {
	local APP="$1"
	if [[ -n "$APP" -a -d "$DOKKU_ROOT/$APP" ]]; then 
		return "$DOKKU_ROOT/$APP"
	elif [[ -n "$APP" -a ! -d "$DOKKU_ROOT/$APP" ]]; then
		return "$DOKKU_ROOT"
	else
		return
	fi
}

is_plugin_image_available() {
	if ! docker images | grep -e "^$PLUGIN_IMAGE " | grep -q " $PLUGIN_IMAGE_VERSION " ; then
      dokku_log_fail "$PLUGIN_SERVICE image $PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION not found"
    fi
}

create_pushover_service() {
	if [[ -z $1 ]]; then
		dokku_log_fail "Please specify a name."
	fi

	local SERVICE="$1"
	if [[ ! -d "${PLUGIN_DATA_ROOT}/${SERVICE}" ]];
		dokku_log_fail "Pushover service ${SERVICE} already exists."
	fi
	SERVICE_ROOT="${PLUGIN_DATA_ROOT}/${SERVICE}";
	LINKS_FILE="${SERVICE_ROOT}/LINKS"
	is_plugin_image_available

	mkdir -p "${SERVICE_ROOT}" || dokku_log_fail "Unable to create service directory"

	dokku_log_info1 "Starting container"
	echo "" > "${SERVICE_ROOT}/ENV"
	SERVICE_NAME="dokku.${PLUGIN_COMMAND_PREFIX}.${SERVICE}"
	ID=$(docker run --name "$SERVICE_NAME" -v "$SERVICE_ROOT/bin:/var/lib/pushover" --env-file="$SERVICE_ROOT/ENV" -d --restart always --label dokku=service --label dokku.service=pushover "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION" service pushover_server start)
    echo "$ID" > "$SERVICE_ROOT/ID"

    dokku_log_verbose_quiet "Waiting for container to be ready"
    docker run --rm --link "$SERVICE_NAME:$PLUGIN_COMMAND_PREFIX" dokkupaas/wait > /dev/null

    dokku_log_info2 "$PLUGIN_SERVICE container created: $SERVICE"
    dokku "$PLUGIN_COMMAND_PREFIX:info" "$SERVICE"
}

set_pushover_settings() {
	local APP="$1"
	local TOKEN="$2"
	local USER="$3"
	local APP_PATH
	if [[ $(is_param_app "$APP") -a -n "$APP" -a -n "$TOKEN" -a -n "$USER" ]]; then
		APP_PATH="$DOKKU_ROOT/$APP"
	elif [[ ! $(is_param_app "$APP") -n "$APP" -a -n "$TOKEN" ]]; then
		APP_PATH="$DOKKU_ROOT"
		USER="$TOKEN"
		TOKEN="$APP"
	else
		dokku_log_fail "Please specify at least a token and user ID"
	fi

	local CONFIG=$(cat<<EOF
TOKEN="${TOKEN}"
USER="${USER}"
EOF
)

	echo "${CONFIG}" > "$APP_PATH/${PUSHOVER_CONFIG}"
	return true
}

clear_pushover_settings() {
	local APP="$1"
	if [[ $(is_param_app "$APP") -a -n "$APP" ]]; then
		APP_PATH="$DOKKU_ROOT/$APP"
	elif [[ -n "$APP" ]]; then
		APP_PATH="$DOKKU_ROOT"
	else
		dokku_log_fail "Please specify an existing app or none to clear global configs."
	fi

	rm "$APP_PATH/${PUSHOVER_CONFIG}"
}

get_pushover_settings() {
	local APP="$1"
	if [[ $(is_param_app "$APP") -a -n "$APP" ]]; then
		APP_PATH="$DOKKU_ROOT/$APP"
	elif [[ -n "$APP" ]]; then
		APP_PATH="$DOKKU_ROOT"
	else
		dokku_log_fail "Please specify an existing app or none to get global configs."
	fi

	cat "$APP_PATH/${PUSHOVER_CONFIG}"
}